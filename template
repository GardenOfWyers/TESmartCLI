#!/bin/bash
# Personal template for bash scripts and rapid prototyping. This was not
# fast to write, but useful as an exercise in array and string functions
# using Bash and to provide repeatable patterns for rapid prototyping.
#
# THIS CODE IS POTENTIALLY UNSAFE. A PROTOTYPE IS NOT PRODUCTION CODE!
#
# While there are built-ins and external commands capable of doing some
# of the things here, as a user there is little or no control over the
# way command line arguments and options are processed. Because I wrote
# these functions here I can change the behavior based on what is needed
# rather than be limited to what is available.

# Set this flag to exit on failure
set -e

# Logging and verbosity. With logging disabled, loglevel controls only the
# verbosity of the output. When logging is set to console, verbose has no
# effect as all log output is already directed to the console.
#LOGGING=console
FACILITY=user
LOGLEVEL=notice
VERBOSE=false

# _LONGOPTS defines the usage text. Optionally this option can be used
# to define whether or not options should be restricted to that set.
declare -A _LONGOPTS=(
  [verbose]="Default: \"$VERBOSE\". Enables/disables verbose output."
  [logging]="Default: \"$LOGGING\". Valid options: syslog, console."
  [loglevel]="Default \"$LOGLEVEL\", the desired log level for the script."
  [name]="Just \"--name\", no argument. Remember, this is an example!"
  [color]="The name of a color, like \"cornflower blue\", in quotes."
)

# If this is not 0 the options will be restricted to those declared in
# the _LONGOPTS map above.
_RESTRICT_OPTIONS=1

# List of options that require an argument
_WITHARGS=(COLOR)

# For completeness of an example for log levels and event handling, here
# are the syslog severity levels we will use to filter output. Note crit
# and higher generally indicate higher conditions than a script failure
# would indicate, unless there is an actual fire, stick to err or lower.
#
# Deprecated versions of the keywords are included in the array so a user
# may use "err" (preferred) or "error" (non-preferred). Note when using
# a logger, such as syslog, facility.priority is numeric. When searching
# for the key name by value, the ordering of this array is significant.
declare -A _SEVERITY=(
  [emerg]=0 [panic]=0 [alert]=1 [crit]=2 [err]=3 [error]=3 [warning]=4
  [warn]=4 [notice]=5 [info]=6 [debug]=7
)

# An additional array mapping the errors levels to their descriptions.
# I'm using this when printing the message to STDERR in this script but
# these would not typically be sent to a logger. Mappings for deprecated
# keywords have been included here as well.
declare -A _SEVERITY_NAME=( [emerg]=Emergency [panic]=Panic [alert]=Alert
  [crit]=Critical [err]=Error [error]=Error [warning]=Warning [warn]=Warning
  [notice]=Notice [info]=Informational [debug]=Debug
)

# This is not meant to be fully inclusive. The user facility should be the
# one that I use the most but local0 through local7 are useful to identify
# different threads that are part of the same script or program.
declare -A _FACILITY=( [user]=0 [local0]=16 [local1]=17 [local2]=18
  [local3]=19 [local4]=20 [local5]=21 [local6]=22 [local7]=23
)

# Event handler with basic logging support for console and syslog. I had
# considered adding journald support but have done enough for a weekend.
function eventLog {
  local priority=${1,,} && shift
  local numericPriority=${_SEVERITY[$priority]}
  local numericLogLevel=${_SEVERITY[${LOGLEVEL,,}]}
  local numericFacility=${_FACILITY[${FACILITY,,}]}

  # Provided limited traceback functionality going back one level
  # deep. Bash appears to prepend to this array, at least for now.
  local traceback=${FUNCNAME[1]}
  if [[ ${#FUNCNAME[*]} -gt 2 ]]; then
    traceback="${FUNCNAME[1]} (from ${FUNCNAME[2]})"
  fi

  # Return if the priority is greater than the log threshold. The higher
  # the priority number, the lower the priority is.
  if [[ ${numericPriority} -gt ${numericLogLevel} ]]; then
    return;
  fi

  # Print the log message to the console is verbose or if logging is
  # set to the console (example, container logging)
  if [[ "${VERBOSE}" == "true" || ${LOGGING} == "console" ]]; then
    echo "${priority^^}: ${traceback}: $@" >&2
  fi

  # I wasn't going to include this but looked simple enough to do with
  # logging(1) so I went ahead and stubbed it out with syslog support
  # in this script. Given the script doesn't actually _do_ anything the
  # example serves as a reminder of what can be done at least.
  case $LOGGING in
    syslog)
      logger --id $$ \
      --priority="${numericFacility}.${numericPriority}" \
      "${traceback}: ${@}"
      ;;
    journald)
      :: # Support the option but don't take action
      ;;
   esac
}

# usage - Print script usage information. This may be improved upon using
# terminfo and tput.
function usage {
  # Generic usage, should be based on requirements
  echo "Usage: $0 <COMMAND> [OPTIONS]"
  echo "  Options:";
  printAssociativeArray '  * %-15.14s: %-58.57s\n' _LONGOPTS
}

# inArray - Searches an array for the existence of a string match. Returns
# either 0 or the total number of time the string matched an array element.
function inArray {
  local i matchnum=0 string=$1; shift
  eventLog debug "Evaluating $1 (before loop)"
  for ((i=1; i<=$#; i++)); do
    if [[ "${string}" == "${@:i:1}" ]]; then
      matchnum=$((matchnum+1))
      eventLog debug "$string == ${@:i:1}"
    else
      eventLog debug "$string != ${@:i:1}"
    fi
  done

  # Sends the debug message to the event handler. Given the English word
  # should agree with the number, the singular form is returned for 1.
  case $matchnum in
    1) eventLog debug "Found $matchnum match for $string."
       ;;
    *) eventLog debug "Found $matchnum matches $string."
       ;;
  esac

  # Return the number of matches to the caller.
  echo $matchnum
}

# Given a format and an array reference, prints array values to STDOUT.
# Note the quoting and "@" symbol, this causes Bash to expand each array
# element to a single word, even if it contains spaces.
function printSimpleArray {
  local element format=$1
  local -n array=$2;
  for element in "${array[@]}"; do
    printf "$format" "$element"
  done
}

# Given a format and an array reference, prints keys and values to STDOUT.
# Note the quoting and "@" symbol, this causes Bash to expand each array
# element to a single word, even if it contains spaces.
function printAssociativeArray {
  local format=$1
  local -n array=$2
  for key in "${!array[@]}"; do
    value=${array[$key]}
    printf "$format" "$key" "${array[$key]}"
  done
}

# Main function (overridable defaults should be set above this line)
#
# Simplified replacement for GNU getopt(1). This was a learning exercise
# and the way it works makes it easier to maintain the usage function and
# writes variables according to the flags passed. While I don't plan on
# using the option much, I included _POSIXLY_CORRECT, an option to make
# option processing stop at the first non-flag.

declare -A _OPTIONS
_POSIXLY_CORRECT=false

# While I prefer GNU, it might be useful to include it in my scripting
# template in case I'm prototyping something requiring that behavior.
# One area I break from GNU is in the format of the LONGOPTS string as
# an array and not grabbing an option that is a flag. In my opinion, this
# makes troubleshooting easier on the commandline.
for ((i=1; i<=$#; i++)); do

  # Enforce GNU or POSIX behavior. Debug should reflect the break.
  if [[ ! ${@:i:1} =~ ^- ]]; then
    if [[ ${_POSIXLY_CORRECT} == "true" ]]; then
      eventLog debug "Stopped processing options at \"${@:i:1}\". \$_POSIXLY_CORRECT==${_POSIXLY_CORRECT}"
      break
    else
      continue
    fi
  fi

  # Remove token from array without reordering. Note the array splice,
  # while the removed element needs to be accounted for at the end of
  # the loop, the identical splice may be repeated without adjustments.
  token=${@:i:1} && set -- "${@:1:i-1}" "${@:i+1}"

  # If the token is identified as a help token, denoted by --help, -h,
  # or -?, print usage and exit (escape hatch).
  if [[ ${token} =~ ^--help$|^-[h?] ]]; then
    usage
    exit 0
  fi

  # The token "--" means stop option processing. Since we already did
  # an array shift, the value of ${@:i:1} points to a different value.
  if [[ "${token}" == "--" ]]; then
    eventLog debug "Stopped processing options at \"${token}\"."
    break;
  fi

  # Set the key for potential key=value pair matching
  key=${token##*-}; key=${key%=*};

  # Transform or normalize the key to change characters, such as a dash,
  # to an underscore, change letters to upper or lowercase, etc.
  if [[ ! ${_TRANSFORM} || ${_TRANSFORM} == "toUpper" ]]; then
    key=${key^^}
  elif [[ ${_TRANSFORM} == "toLower" ]]; then
    key=${key,,}
  fi

  # Variables starting with "_" like "_LONGOPTS=" are considered static
  # internal definitions in my personal coding standard and should not
  # be accepted as a valid option key.
  if [[ ${token} =~ ^_ ]]; then
    eventLog err "Invalid Option: Options may not start with \"_\"."
    exit 1
  fi

  # Restrict the options to those defined in the usage function in a
  # case-insensitive matter (options are not case sensitive). For extra
  # readability of the debug messages, all strings are lowercase.
  if [[ ${_RESTRICT_OPTIONS} != 0 ]]; then
    eventLog debug "Checking if ${key,,} is in the list of valid options."
    VALID_OPTIONS=(${!_LONGOPTS[*]})
    matches=$(inArray ${key,,} ${VALID_OPTIONS[*],,})
    if [[ ${matches} -eq 0 ]]; then
      eventLog err "Invalid Option: ${key,,} is not a valid option."
      exit 1
    fi
    eventLog debug "Option ${key,,} is in the list of valid options."
  fi

  # Variables may be set by explicit assignment. Thus a flag may be set
  # to 0, 1, true, false, etc. If the list of options is not checked, an
  # arbitrary variable within the script can be changed via commandline.
  # If the argument does start with "--", this will match GNU behavior.
  if [[ ${token} =~ = ]]; then
    value=${token#*=}
  else
    # If not assigned, reset from prior run before checking
    unset value
  fi

  if [[ ${value} ]]; then
    eventLog debug "Split \"${token}\" into \"${key}\" and \"${value}\"."
  else
    eventLog debug "Transformed \"${token}\" into \"${key}\"."
  fi

  # If an option needs an argument, grab the next argument unless the
  # next token appears to be an option. The opposite is not checked.
  # The check for an argument starting with leading dashes is neither
  # compliant with GNU or POSIX which will consume the next option as
  # a value, I dislike that as it complicates troubleshooting.
  eventLog debug "Checking if $key is required"
  matches=$(inArray ${key,,} ${_WITHARGS[*],,})
  if [[ $matches -ne 0 && ! -v ${value} ]]; then
    eventLog debug "${key} requires an argument."
    if [[ ! ${@:i:1} =~ ^- ]]; then
      value=${@:i:1} && set -- "${@:1:i-1}" "${@:i+1}"
      eventLog debug "Option \"${key}\" set to \"${value}\"."
    else
      eventLog err "Option ${key} is missing a required argument."
      exit 1
    fi
  fi

  # After all of the checking has been completed, this will be set as
  # a variable so any dashes must be converted to underscores.
  key=$(echo $key | tr '-' '_')

  # If the value was not defined explicitly no value was required and the
  # key is treated as a flag defaulting to "true". Escaped single quotes
  # were used to avoid additional interpolation of values here.
  if [[ -n "${value}" ]]; then
    eval ${key}=\'${value}\'
  else
    value=true && eval ${key}="$value"
  fi

  # It is difficult to check to see if the value was not changed during
  # shell evaluation. This could lead to some difficult debugging if it
  # there wasn't debugging available for the assignment.
  eventLog debug "Set ${key}=\"${value}\"."

  # Add the key onto the _OPTIONS array if assignment successful.
  _OPTIONS[${key}]="${value}"

  # The current option was not evaluated. Back up the pointer to
  # keep the loop in the same place on the next execution.
  i=$((i-1))
done

############################################################################
# Prototype Section
#
# This is where I would put my prototype code and functions. Here are small
# tests of the code written above that weren't tested as such above.

echo $0 called with $@

echo "Options set on the CLI:"
printAssociativeArray '  * %-15.14s: %-58.57s\n' _OPTIONS

_SIMPLEARRAY=(one two three red blue green)
echo "Simple array test (one-dimensional)"
printSimpleArray '  * %-15.14s: %-58.57s\n' _SIMPLEARRAY

echo "Simple array test two:"
printSimpleArray '  * %-15.14s: %-58.57s\n' _OPTIONS

echo "Test of the usage function"
usage

LOGLEVEL=err
VERBOSE=true
echo "Testing eventLog handler. Set to $LOGLEVEL (${_SEVERITY[${LOGLEVEL,,}]})"
eventLog debug "This message should not be seen at debug priority."
eventLog error "This message should be seen at priority error."
eventLog err "This message should be seen at priority err."
eventLog panic "This message should be seen at priority panic."
LOGLEVEL=debug
echo "Testing eventLog handler. Set to $LOGLEVEL (${_SEVERITY[${LOGLEVEL,,}]})"
eventLog debug "This message should be seen at priority debug."
eventLog err "This message should be seen at priority err."
